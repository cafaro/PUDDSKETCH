/**
 * @file Header.h 
 * @author CM
 * @brief Common const definitions and includes
*/

#ifndef __HEADER_H__
#define __HEADER_H__

#include <mpi.h>                // MPI library
#include <unistd.h>             // getpid
#include <string.h>             // malloc
#include <assert.h>

#include <iostream>             
#include <iomanip>              //std::setprecision
#include <cmath>                
#include <chrono>           //for seed

#include <map>
#include <algorithm>
#include <random>
#include <iterator>
#include <vector>
#include <utility>


const int EXPECTED_PARAMS = 8;          // max number of command line arguments to provide
const int MANDATORY_PARAMS = 6;         // min number of command line arguments to provide
const int BSIZE = 256;                  // max filename length
const double ALPHA = 0.001;             // (default) initial α for each DDSketch (if not otherwise specified)
const int INPUTLEN = 1000000;           // default input len 1M of items

//*** ERRORs CODE definition
const int EPARAMS = 3;                  // Error on command line arguments
const int ELOGFILE = 4;                 // Error on opening process's log file
const int EDATA = 7;                    // Error on data decomposition
const int ESERIALIZATION = 17;          // Error on message serialization/deserialization

const int MIN_KEY = pow(2,30);          // min negative key value, for 0 and near-0 values (B* for -∞ values)



/**
 * @brief the type of input distributions used for tests
 */
enum DISTRIBUTIONS{ UNKNOWN=-1, UNIFORM=1, EXPONENTIAL=2, NORMAL=3, BETA=4, LOGN=5}; 


/**
 * @brief command line parameters management
 */
typedef struct Params { 

    char filename[BSIZE];               // path to the input file to process
    bool fileflag;                      // true if input is from file, false if self-generated by the process 
    
    int sketch_bound;                   // bound on the number of bins in the sketch
    double initial_alpha;               // initial α for each DDSketch
    
    int seed;                           // initial seed for random number generation

    DISTRIBUTIONS dtype;                // distribution type choosen by user
    char dname[32];                     // distribution name
    double x;                           // mean (μ), a (range [a,b)), lambda (λ)
    double y;                           // stddev (σ), b (range [a,b)), -
    long processInputLen;               // len of local data for current process

    bool exactFlag;                     // if true, exact quantiles are computed on the root node
}Params;



/**
 * @brief struct Bucket represents a bin of the sketch:
 * - key is the ⎡log(x)/log(γ)⎤
 * - count is the number of items that fall in the bin labeled key
 * 
 */
struct Bucket{
    int key;
    long count;
};


/**
 * @brief struct PackedPair is used in the serialization/deserialization of the MPI_PACKED message
 * exchanged in the Reduce for a couple of negative and positive sketch
 */
struct PackedPair {
    
    double alpha;               // the α of the Sketch (positive and negative)
    int collapses;              // the number of collapses
    int bound;                  // the sketch bound on the number of bins

    int posibins;               // the # bins in the positive sketch
    long posipop;               // the # items in the positive sketch
    struct Bucket *posi;        // the positive sketch (of size posibins)

    int negabins;               // the # bins in the negative sketch
    long negapop;               // the # items in the negative sketch
    struct Bucket *nega;        // the negative sketch (of size negabins)
};


typedef struct SketchT {
    
    std::map<int,long> posiSketch;               // sketch for positive and null items
    int posipop;                                // population in the positive sketch
    int posibins;                               // number of bins in the positive sketch respectively
    
    std::map<int,long> negaSketch;               // sketch for negative items
    int negapop;                                // population in the negative sketch
    int negabins;                               // number of bins in the negative sketch 
    
    int process_collapses;                      // total number of collapses executed on the overall sketch by current process
    
    double p_alpha;                             // process's actual α  
    double gamma;                               // γ = (1+α)/(1-α),  γ> 1 ∀α
    double base;                                // logγ
    double NULLBOUND;                           // define here NULLBOUND since we don't want it to change in collapses
    int mbound;                                 // memory bound on the number of bins in the pair of sketches
}SketchT;


#endif //__HEADER_H__

